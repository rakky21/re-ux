{"ast":null,"code":"var events = require('events');\n\nvar debug = require('debug')('nodemon');\n\nvar util = require('util');\n\nvar Bus = function () {\n  events.EventEmitter.call(this);\n};\n\nutil.inherits(Bus, events.EventEmitter);\nvar bus = new Bus(); // /*\n\nvar collected = {};\nbus.on('newListener', function (event) {\n  debug('bus new listener: %s (%s)', event, bus.listeners(event).length);\n\n  if (!collected[event]) {\n    collected[event] = true;\n    bus.on(event, function () {\n      debug('bus emit: %s', event);\n    });\n  }\n}); // */\n// proxy process messages (if forked) to the bus\n\nprocess.on('message', function (event) {\n  debug('process.message(%s)', event);\n  bus.emit(event);\n});\nvar emit = bus.emit; // if nodemon was spawned via a fork, allow upstream communication\n// via process.send\n\nif (process.send) {\n  bus.emit = function (event, data) {\n    process.send({\n      type: event,\n      data: data\n    });\n    emit.apply(bus, arguments);\n  };\n}\n\nmodule.exports = bus;","map":{"version":3,"sources":["C:/Users/rakky/codingOG/homework/node_modules/nodemon/lib/utils/bus.js"],"names":["events","require","debug","util","Bus","EventEmitter","call","inherits","bus","collected","on","event","listeners","length","process","emit","send","data","type","apply","arguments","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,SAAjB,CAAZ;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIG,GAAG,GAAG,YAAY;AACpBJ,EAAAA,MAAM,CAACK,YAAP,CAAoBC,IAApB,CAAyB,IAAzB;AACD,CAFD;;AAIAH,IAAI,CAACI,QAAL,CAAcH,GAAd,EAAmBJ,MAAM,CAACK,YAA1B;AAEA,IAAIG,GAAG,GAAG,IAAIJ,GAAJ,EAAV,C,CAEA;;AACA,IAAIK,SAAS,GAAG,EAAhB;AACAD,GAAG,CAACE,EAAJ,CAAO,aAAP,EAAsB,UAAUC,KAAV,EAAiB;AACrCT,EAAAA,KAAK,CAAC,2BAAD,EAA8BS,KAA9B,EAAqCH,GAAG,CAACI,SAAJ,CAAcD,KAAd,EAAqBE,MAA1D,CAAL;;AACA,MAAI,CAACJ,SAAS,CAACE,KAAD,CAAd,EAAuB;AACrBF,IAAAA,SAAS,CAACE,KAAD,CAAT,GAAmB,IAAnB;AACAH,IAAAA,GAAG,CAACE,EAAJ,CAAOC,KAAP,EAAc,YAAY;AACxBT,MAAAA,KAAK,CAAC,cAAD,EAAiBS,KAAjB,CAAL;AACD,KAFD;AAGD;AACF,CARD,E,CAUA;AAEA;;AACAG,OAAO,CAACJ,EAAR,CAAW,SAAX,EAAsB,UAAUC,KAAV,EAAiB;AACrCT,EAAAA,KAAK,CAAC,qBAAD,EAAwBS,KAAxB,CAAL;AACAH,EAAAA,GAAG,CAACO,IAAJ,CAASJ,KAAT;AACD,CAHD;AAKA,IAAII,IAAI,GAAGP,GAAG,CAACO,IAAf,C,CAEA;AACA;;AACA,IAAID,OAAO,CAACE,IAAZ,EAAkB;AAChBR,EAAAA,GAAG,CAACO,IAAJ,GAAW,UAAUJ,KAAV,EAAiBM,IAAjB,EAAuB;AAChCH,IAAAA,OAAO,CAACE,IAAR,CAAa;AAAEE,MAAAA,IAAI,EAAEP,KAAR;AAAeM,MAAAA,IAAI,EAAEA;AAArB,KAAb;AACAF,IAAAA,IAAI,CAACI,KAAL,CAAWX,GAAX,EAAgBY,SAAhB;AACD,GAHD;AAID;;AAEDC,MAAM,CAACC,OAAP,GAAiBd,GAAjB","sourcesContent":["var events = require('events');\nvar debug = require('debug')('nodemon');\nvar util = require('util');\n\nvar Bus = function () {\n  events.EventEmitter.call(this);\n};\n\nutil.inherits(Bus, events.EventEmitter);\n\nvar bus = new Bus();\n\n// /*\nvar collected = {};\nbus.on('newListener', function (event) {\n  debug('bus new listener: %s (%s)', event, bus.listeners(event).length);\n  if (!collected[event]) {\n    collected[event] = true;\n    bus.on(event, function () {\n      debug('bus emit: %s', event);\n    });\n  }\n});\n\n// */\n\n// proxy process messages (if forked) to the bus\nprocess.on('message', function (event) {\n  debug('process.message(%s)', event);\n  bus.emit(event);\n});\n\nvar emit = bus.emit;\n\n// if nodemon was spawned via a fork, allow upstream communication\n// via process.send\nif (process.send) {\n  bus.emit = function (event, data) {\n    process.send({ type: event, data: data });\n    emit.apply(bus, arguments);\n  };\n}\n\nmodule.exports = bus;\n"]},"metadata":{},"sourceType":"script"}